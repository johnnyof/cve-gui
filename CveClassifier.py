import sys, os
import time
import tensorflow as tf
import funcs
import shutil
import numpy as np
from PyQt4 import QtCore, QtGui


from cveGui import Ui_MainWindow


class Window(QtGui.QMainWindow, Ui_MainWindow):

    def __init__(self, parent=None):
        super(Window, self).__init__(parent)
        self.setupUi(self)
        self.progressBar.setValue(0)
        self.plainTextEdit.appendPlainText("##########INSTRUCTIONS###########")
        self.plainTextEdit.appendPlainText("1. Select the folder containing input images.")
        self.plainTextEdit.appendPlainText("2. Select the folder to save the results.")
        self.plainTextEdit.appendPlainText("3. Select the inference graph to use.")
        self.plainTextEdit.appendPlainText("4. Click \"Classify\"")

        #Define button click actions
        self.pushButton_3.clicked.connect(self.browseImg)
        self.pushButton_4.clicked.connect(self.selectOutputFolder)
        self.pushButton_5.clicked.connect(self.selectGraph)
        self.pushButton.clicked.connect(self.classifyImages)
        self.pushButton_2.clicked.connect(self.reset)



    #Methods related to button clicks
    def classifyImages(self):
        imgFolder = self.label_3.text()
        outFolder = self.label_5.text()
        graph = self.label_6.text()
        if not imgFolder:
            self.plainTextEdit.appendPlainText("Image folder must be selected!")
        if not outFolder:
            self.plainTextEdit.appendPlainText("Output folder must be selected!")
        if imgFolder and outFolder and graph:
            self.plainTextEdit.appendPlainText("Starting classification thread...")

            self.progressBar.setMaximum(len(os.listdir(imgFolder)))
            self.progressBar.setValue(0)
            self.cThread = classifyThread(
                self.label_3.text(),
                self.label_5.text(),
                self.label_6.text())

            self.connect(self.cThread, QtCore.SIGNAL("finished()"), self.done)
            self.connect(self.cThread, QtCore.SIGNAL("classified(QString)"), self.log)
            self.connect(self.cThread, QtCore.SIGNAL("progress()"), self.add)

            self.cThread.start()

    def selectOutputFolder(self):
         name = str(QtGui.QFileDialog.getExistingDirectory(self, 'Select Folder'))
         self.label_5.setText(name)
         text = "Output folder set to: " + self.label_5.text()
         self.plainTextEdit.appendPlainText(text)
    def browseImg(self):
        name = str(QtGui.QFileDialog.getExistingDirectory(self, 'Open files'))
    #    file = open(name, 'r')
        self.label_3.setText(name)
        text = "Image folder set to: " + self.label_3.text()
        self.plainTextEdit.appendPlainText(text)
    def selectGraph(self):
        name = QtGui.QFileDialog.getOpenFileName(self, 'Open file')
        file = open(name, 'r')
        self.label_6.setText(file.name)
        text = "Inference graph selected: " + self.label_6.text()
        self.plainTextEdit.appendPlainText(text)
    def reset(self):
        self.label_3.clear()
        self.label_5.clear()
        self.label_6.clear()
    def log(self, text):
        self.plainTextEdit.appendPlainText(text)
    def add(self):
        self.progressBar.setValue(self.progressBar.value()+1)


    #Signals
    def done(self):
        QtGui.QMessageBox.information(self, "Complete!", "Done classifying images.")
        self.plainTextEdit.appendPlainText('Classification complete, outputs saved to: %s/disease_name' % self.label_5.text())
#Threading
class classifyThread(QtCore.QThread):
    def __init__(self, imgf, outf, g):
        QtCore.QThread.__init__(self)
        self.imgf = imgf
        self.outf = outf
        self.g = g


    def __del__(self):
        self.wait()

    def run(self):
        graph = funcs.load_graph(self.g)
        input_name = "prefix/input"
        output_name = "prefix/InceptionResnetV2/Logits/Predictions"
        input_op = graph.get_operation_by_name(input_name)
        output_op = graph.get_operation_by_name(output_name)
        for file in os.listdir(self.imgf):
            file_name = self.imgf + "/" + file
            t = funcs.read_image_file(
                file_name,
                input_height=299,
                input_width=299,
                input_mean=0,
                input_std=255)
            with tf.Session(graph=graph) as sess:
                results = sess.run(output_op.outputs[0], {
                    input_op.outputs[0]: t
                    })
            results = np.squeeze(results)

            top_k = results.argsort()[-1:][::-1]
            label_file = "./graphs/labels.txt"
            labels = funcs.load_labels(label_file)

            text = "Prediction on image: " + file
            self.emit(QtCore.SIGNAL('classified(QString)'), text)

            for i in top_k:
                disease = labels[i]
                _, disease = disease.split(":")
                if not os.path.exists(self.outf + "/" + disease):
                    os.makedirs(self.outf + "/" + disease)
                shutil.copy2(file_name, self.outf + "/" + disease)
                text = labels[i] + " => " + str(results[i])
                self.emit(QtCore.SIGNAL('classified(QString)'), text)

            self.emit(QtCore.SIGNAL('progress()'))



app = QtGui.QApplication(sys.argv)
w = Window()
w.show()
sys.exit(app.exec_())
