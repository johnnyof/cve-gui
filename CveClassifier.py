import sys, os
import time
import tensorflow as tf
from PyQt4 import QtCore, QtGui

from cveGui import Ui_MainWindow


class Window(QtGui.QMainWindow, Ui_MainWindow):

    def __init__(self, parent=None):
        super(Window, self).__init__(parent)
        self.setupUi(self)
        self.progressBar.setValue(0)

        #Define button click actions
        self.pushButton_3.clicked.connect(self.browseImg)
        self.pushButton_4.clicked.connect(self.selectOutputFolder)
        self.pushButton_5.clicked.connect(self.selectGraph)
        self.pushButton.clicked.connect(self.classifyImages)
        self.pushButton_2.clicked.connect(self.reset)



    #Methods related to button clicks
    def classifyImages(self):
        imgFolder = self.label_3.text()
        outFolder = self.label_5.text()
        graph = self.label_6.text()
        self.progressBar.setMaximum(len(os.listdir(imgFolder)))
        self.progressBar.setValue(0)
        self.cThread = classifyThread(
            self.label_3.text(),
            self.label_5.text(),
            self.label_6.text())

        self.connect(self.cThread, QtCore.SIGNAL("finished()"), self.done)
        self.connect(self.cThread, QtCore.SIGNAL("classified(QString)"), self.log)
        self.cThread.start()

    def selectOutputFolder(self):
         name = str(QtGui.QFileDialog.getExistingDirectory(self, 'Select Folder'))
         self.label_5.setText(name)
    def browseImg(self):
        name = str(QtGui.QFileDialog.getExistingDirectory(self, 'Open files'))
    #    file = open(name, 'r')
        self.label_3.setText(name)
    def selectGraph(self):
        name = QtGui.QFileDialog.getOpenFileName(self, 'Open file')
        file = open(name, 'r')
        self.label_6.setText(file.name)
    def reset(self):
        self.label_3.clear()
        self.label_5.clear()
        self.label_6.clear()
    def log(self, text):
        self.plainTextEdit.appendPlainText(text)
        self.progressBar.setValue(self.progressBar.value()+1)


    #Signals
    def done(self):
        QtGui.QMessageBox.information(self, "Complete!", "Done classifying images.")

#Threading
class classifyThread(QtCore.QThread):
    def __init__(self, imgf, outf, g):
        QtCore.QThread.__init__(self)
        self.imgf = imgf
        self.outf = outf
        self.g = g

    def __del__(self):
        self.wait()

    def run(self):
        for file in os.listdir(self.imgf):
            if file.endswith(".png"):
                self.emit(QtCore.SIGNAL('classified(QString)'), file)
                time.sleep(0.01)



app = QtGui.QApplication(sys.argv)
w = Window()
w.show()
sys.exit(app.exec_())
